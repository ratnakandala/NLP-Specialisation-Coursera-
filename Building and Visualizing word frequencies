import nltk                             #Python library
from nltk.corpus import twitter_samples #sample Twitter dataset from NLTK
import matplotlib.pyplot as plt         # visualization library
import nympy as np                      #Library for scientific computing and matrix operations

nltk.download('twitter_samples')

#Helper functions in the utils.py file
# process_tweet(): cleans the text, tokenizes it into separate words, removes stopwords, and converts words to stems
# build_freqs(): counts how often a word in the 'corpus' (the entire set of tweets) was associated with a positive label 1 or a negative label 0.
# It then builds the 'freqs' dictionary, where each key is a (word, label) tuple, and the value is the count of its frequency within the corpus of tweets.

nltk.download('stopwords')                     #download the stopwords for the process_tweet function
from utils import process_tweet, build_freqs   #import our convenience functions

LOAD THE NLTK SAMPLE (TWITTER) DATASET

all_positive_tweets = twitter_samples.strings('positive_tweets.json')  #selecting all postiive tweets
all_negative_tweets = twitter_samples.strings('negative_tweets.json')  #selecting all negative tweets

tweets = all_positive_tweets + all_negative_tweets             #concatenate the lists, 1st part is the positive tweets followed by the negative

print("Number of tweets: ", len(tweets))

np.append(np.ones((len(all_positive_tweets))), np.zeros((len(all_negative_tweets))))    #Make a numpy array representing labels of the tweets

#DICTIONARIES
# What is a dictionary in Python? :
# a mutable and indexed collection; 
# stores items as key-value pairs and uses hash tables underneath to allow practically constant time lookups.
# Why are they essential?  Enables fast retrieval of items or containment checks even with thousands of entries in the collection.

dictionary = {'key1': 1, 'key2': 2}

# ADDING OR EDITING ENTRIES
dictionary['key3'] = -5   # add a new entry
dictionary['key1'] = 0     #Overwrite the value of key1
print(dictionary)


#ACCESSING VALUES AND LOOKUP KEYS
print(dictionary['key2']) #Square bracket lookup when the key exist
print(dictionary['key8'])  #The output of this line is intended to produce a KeyError















